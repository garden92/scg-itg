package com.kt.kol.gateway.itg.cache;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.context.annotation.Profile;
import org.springframework.data.redis.core.ReactiveRedisTemplate;
import org.springframework.stereotype.Service;
import reactor.core.publisher.Mono;

import java.time.Duration;
import java.util.concurrent.TimeUnit;

/**
 * Redis 캐시 서비스 (향후 적용 예정)
 * SOAP 응답 및 템플릿 캐싱 처리
 */
@Service
@Profile("redis")
@RequiredArgsConstructor
@Slf4j
public class RedisCacheService {
    
    private final ReactiveRedisTemplate<String, Object> redisTemplate;
    
    // 캐시 키 접두사
    private static final String TEMPLATE_PREFIX = "template:";
    private static final String RESPONSE_PREFIX = "soap:response:";
    private static final String METRIC_PREFIX = "metrics:";
    private static final String SESSION_PREFIX = "session:";
    
    /**
     * SOAP 템플릿 캐시 저장
     */
    public Mono<Boolean> cacheTemplate(String service, String function, String template) {
        String key = generateTemplateKey(service, function);
        return redisTemplate.opsForValue()
                .set(key, template, Duration.ofHours(24))
                .doOnSuccess(result -> {
                    if (result) {
                        log.debug("Template cached: {}", key);
                    }
                })
                .onErrorResume(error -> {
                    log.error("Failed to cache template: {}", error.getMessage());
                    return Mono.just(false);
                });
    }
    
    /**
     * SOAP 템플릿 캐시 조회
     */
    public Mono<String> getTemplate(String service, String function) {
        String key = generateTemplateKey(service, function);
        return redisTemplate.opsForValue()
                .get(key)
                .cast(String.class)
                .doOnNext(template -> log.debug("Template cache hit: {}", key))
                .doOnError(error -> log.debug("Template cache miss: {}", key));
    }
    
    /**
     * SOAP 응답 캐시 저장
     */
    public Mono<Boolean> cacheResponse(String requestHash, Object response) {
        String key = RESPONSE_PREFIX + requestHash;
        return redisTemplate.opsForValue()
                .set(key, response, Duration.ofMinutes(5))
                .doOnSuccess(result -> {
                    if (result) {
                        log.debug("Response cached: {}", key);
                        incrementCacheMetric("response_cache_writes");
                    }
                });
    }
    
    /**
     * SOAP 응답 캐시 조회
     */
    public Mono<Object> getResponse(String requestHash) {
        String key = RESPONSE_PREFIX + requestHash;
        return redisTemplate.opsForValue()
                .get(key)
                .doOnNext(response -> {
                    log.debug("Response cache hit: {}", key);
                    incrementCacheMetric("response_cache_hits");
                })
                .doOnError(error -> {
                    log.debug("Response cache miss: {}", key);
                    incrementCacheMetric("response_cache_misses");
                });
    }
    
    /**
     * 메트릭 데이터 저장
     */
    public Mono<Void> saveMetric(String metricName, Object value) {
        String key = METRIC_PREFIX + metricName + ":" + System.currentTimeMillis();
        return redisTemplate.opsForValue()
                .set(key, value, Duration.ofHours(1))
                .then()
                .doOnSuccess(v -> log.debug("Metric saved: {}", key));
    }
    
    /**
     * 세션 데이터 저장
     */
    public Mono<Boolean> saveSession(String userId, String sessionId, Object sessionData) {
        String key = SESSION_PREFIX + userId + ":" + sessionId;
        return redisTemplate.opsForValue()
                .set(key, sessionData, Duration.ofMinutes(30))
                .doOnSuccess(result -> {
                    if (result) {
                        log.debug("Session saved: {}", key);
                    }
                });
    }
    
    /**
     * 세션 데이터 조회
     */
    public Mono<Object> getSession(String userId, String sessionId) {
        String key = SESSION_PREFIX + userId + ":" + sessionId;
        return redisTemplate.opsForValue()
                .get(key)
                .doOnNext(session -> log.debug("Session retrieved: {}", key));
    }
    
    /**
     * 캐시 무효화
     */
    public Mono<Boolean> invalidateCache(String pattern) {
        return redisTemplate.keys(pattern)
                .flatMap(key -> redisTemplate.delete(key))
                .reduce(0L, Long::sum)
                .map(count -> {
                    log.info("Invalidated {} cache entries with pattern: {}", count, pattern);
                    return count > 0;
                });
    }
    
    /**
     * 캐시 히트율 계산
     */
    public Mono<Double> getCacheHitRate() {
        Mono<Long> hits = getMetricValue("response_cache_hits");
        Mono<Long> misses = getMetricValue("response_cache_misses");
        
        return Mono.zip(hits, misses)
                .map(tuple -> {
                    long totalHits = tuple.getT1();
                    long totalMisses = tuple.getT2();
                    long total = totalHits + totalMisses;
                    if (total == 0) return 0.0;
                    return (double) totalHits / total * 100;
                });
    }
    
    /**
     * 파이프라이닝을 통한 일괄 처리
     * 여러 캐시 작업을 한 번에 처리하여 성능 향상
     */
    public Mono<Void> batchCache(Map<String, Object> entries, Duration ttl) {
        return redisTemplate.execute(connection -> {
            return Mono.fromRunnable(() -> {
                entries.forEach((key, value) -> {
                    connection.stringCommands()
                            .set(key.getBytes(), value.toString().getBytes());
                    connection.keyCommands()
                            .expire(key.getBytes(), ttl.toSeconds());
                });
            });
        }).then();
    }
    
    // Private helper methods
    
    private String generateTemplateKey(String service, String function) {
        return TEMPLATE_PREFIX + service + ":" + function;
    }
    
    private Mono<Void> incrementCacheMetric(String metricName) {
        String key = METRIC_PREFIX + metricName;
        return redisTemplate.opsForValue()
                .increment(key)
                .then();
    }
    
    private Mono<Long> getMetricValue(String metricName) {
        String key = METRIC_PREFIX + metricName;
        return redisTemplate.opsForValue()
                .get(key)
                .cast(Long.class)
                .defaultIfEmpty(0L);
    }
}