package com.kt.kol.gateway.itg.cache;

import com.fasterxml.jackson.databind.ObjectMapper;
import io.lettuce.core.ClientOptions;
import io.lettuce.core.SocketOptions;
import io.lettuce.core.cluster.ClusterClientOptions;
import io.lettuce.core.cluster.ClusterTopologyRefreshOptions;
import lombok.RequiredArgsConstructor;
import org.springframework.boot.autoconfigure.data.redis.RedisProperties;
import org.springframework.cache.CacheManager;
import org.springframework.cache.annotation.EnableCaching;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Profile;
import org.springframework.data.redis.cache.RedisCacheConfiguration;
import org.springframework.data.redis.cache.RedisCacheManager;
import org.springframework.data.redis.connection.ReactiveRedisConnectionFactory;
import org.springframework.data.redis.connection.RedisConnectionFactory;
import org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration;
import org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory;
import org.springframework.data.redis.core.ReactiveRedisTemplate;
import org.springframework.data.redis.serializer.*;

import java.time.Duration;
import java.util.HashMap;
import java.util.Map;

/**
 * Redis 캐시 설정 (향후 적용 예정)
 * 이 설정은 Redis가 도입될 때 활성화됩니다.
 * 
 * 활성화 방법:
 * 1. @Profile("redis") 제거
 * 2. application.yml에 Redis 설정 추가
 * 3. Redis 서버 구동
 */
@Configuration
@EnableCaching
@Profile("redis") // Redis 사용 시 이 프로파일 활성화
@RequiredArgsConstructor
public class RedisConfig {

    private final RedisProperties redisProperties;
    private final ObjectMapper objectMapper;

    /**
     * Lettuce 연결 팩토리 설정
     * 클러스터 지원 및 연결 풀 최적화
     */
    @Bean
    public LettuceConnectionFactory redisConnectionFactory() {
        // 클러스터 토폴로지 자동 갱신 설정
        ClusterTopologyRefreshOptions topologyRefreshOptions = ClusterTopologyRefreshOptions.builder()
                .enablePeriodicRefresh(Duration.ofSeconds(30))
                .enableAllAdaptiveRefreshTriggers()
                .build();

        // 소켓 옵션 설정
        SocketOptions socketOptions = SocketOptions.builder()
                .connectTimeout(Duration.ofSeconds(2))
                .keepAlive(true)
                .tcpNoDelay(true)
                .build();

        // 클라이언트 옵션 설정
        ClientOptions clientOptions = ClusterClientOptions.builder()
                .topologyRefreshOptions(topologyRefreshOptions)
                .socketOptions(socketOptions)
                .autoReconnect(true)
                .build();

        // Lettuce 클라이언트 설정
        LettuceClientConfiguration clientConfig = LettuceClientConfiguration.builder()
                .clientOptions(clientOptions)
                .commandTimeout(Duration.ofSeconds(2))
                .build();

        return new LettuceConnectionFactory(redisProperties.getHost(), 
                                           redisProperties.getPort());
    }

    /**
     * Reactive Redis Template 설정
     * 비동기 처리를 위한 Reactive 템플릿
     */
    @Bean
    public ReactiveRedisTemplate<String, Object> reactiveRedisTemplate(
            ReactiveRedisConnectionFactory connectionFactory) {
        
        Jackson2JsonRedisSerializer<Object> serializer = 
            new Jackson2JsonRedisSerializer<>(objectMapper, Object.class);

        RedisSerializationContext<String, Object> serializationContext = 
            RedisSerializationContext
                .<String, Object>newSerializationContext()
                .key(StringRedisSerializer.UTF_8)
                .value(serializer)
                .hashKey(StringRedisSerializer.UTF_8)
                .hashValue(serializer)
                .build();

        return new ReactiveRedisTemplate<>(connectionFactory, serializationContext);
    }

    /**
     * 캐시 매니저 설정
     * 캐시별 TTL 및 설정 관리
     */
    @Bean
    public CacheManager cacheManager(RedisConnectionFactory connectionFactory) {
        RedisCacheConfiguration defaultConfig = RedisCacheConfiguration.defaultCacheConfig()
                .serializeKeysWith(RedisSerializationContext.SerializationPair
                        .fromSerializer(new StringRedisSerializer()))
                .serializeValuesWith(RedisSerializationContext.SerializationPair
                        .fromSerializer(new GenericJackson2JsonRedisSerializer()))
                .entryTtl(Duration.ofMinutes(10));

        // 캐시별 개별 설정
        Map<String, RedisCacheConfiguration> cacheConfigurations = new HashMap<>();
        
        // SOAP 템플릿 캐시 - 24시간
        cacheConfigurations.put("soapTemplates", 
            defaultConfig.entryTtl(Duration.ofHours(24)));
        
        // SOAP 응답 캐시 - 5분
        cacheConfigurations.put("soapResponses", 
            defaultConfig.entryTtl(Duration.ofMinutes(5)));
        
        // 메트릭 캐시 - 1시간
        cacheConfigurations.put("metrics", 
            defaultConfig.entryTtl(Duration.ofHours(1)));
        
        // 세션 캐시 - 30분
        cacheConfigurations.put("sessions", 
            defaultConfig.entryTtl(Duration.ofMinutes(30)));

        return RedisCacheManager.builder(connectionFactory)
                .cacheDefaults(defaultConfig)
                .withInitialCacheConfigurations(cacheConfigurations)
                .transactionAware()
                .build();
    }

    /**
     * Redis 상태 체크 빈
     * 헬스체크 및 모니터링용
     */
    @Bean
    public RedisHealthIndicator redisHealthIndicator(
            ReactiveRedisConnectionFactory connectionFactory) {
        return new RedisHealthIndicator(connectionFactory);
    }
}