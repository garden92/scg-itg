package com.kt.kol.gateway.itg.cache;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.boot.actuator.health.Health;
import org.springframework.boot.actuator.health.ReactiveHealthIndicator;
import org.springframework.context.annotation.Profile;
import org.springframework.data.redis.connection.ReactiveRedisConnectionFactory;
import org.springframework.stereotype.Component;
import reactor.core.publisher.Mono;

/**
 * Redis 헬스 체크 인디케이터
 * Spring Actuator와 통합하여 Redis 상태 모니터링
 */
@Component
@Profile("redis")
@RequiredArgsConstructor
@Slf4j
public class RedisHealthIndicator implements ReactiveHealthIndicator {
    
    private final ReactiveRedisConnectionFactory connectionFactory;
    
    @Override
    public Mono<Health> health() {
        return checkRedisHealth()
                .map(this::buildHealthStatus)
                .onErrorResume(this::buildErrorStatus);
    }
    
    private Mono<RedisHealthInfo> checkRedisHealth() {
        return connectionFactory.getReactiveConnection()
                .ping()
                .map(response -> {
                    RedisHealthInfo info = new RedisHealthInfo();
                    info.setStatus("UP");
                    info.setResponseTime(System.currentTimeMillis());
                    
                    // 추가 메트릭 수집
                    return connectionFactory.getReactiveConnection()
                            .serverCommands()
                            .info()
                            .map(serverInfo -> {
                                info.parseServerInfo(serverInfo);
                                return info;
                            })
                            .defaultIfEmpty(info)
                            .block();
                })
                .doOnSuccess(info -> log.debug("Redis health check successful"))
                .doOnError(error -> log.error("Redis health check failed", error));
    }
    
    private Health buildHealthStatus(RedisHealthInfo info) {
        return Health.up()
                .withDetail("status", info.getStatus())
                .withDetail("responseTime", info.getResponseTime() + "ms")
                .withDetail("version", info.getVersion())
                .withDetail("usedMemory", info.getUsedMemory())
                .withDetail("connectedClients", info.getConnectedClients())
                .withDetail("uptimeInSeconds", info.getUptimeInSeconds())
                .build();
    }
    
    private Mono<Health> buildErrorStatus(Throwable error) {
        return Mono.just(
                Health.down()
                        .withDetail("status", "DOWN")
                        .withDetail("error", error.getMessage())
                        .build()
        );
    }
    
    /**
     * Redis 헬스 정보 DTO
     */
    private static class RedisHealthInfo {
        private String status;
        private long responseTime;
        private String version = "unknown";
        private String usedMemory = "unknown";
        private int connectedClients = 0;
        private long uptimeInSeconds = 0;
        
        public void parseServerInfo(String info) {
            if (info == null) return;
            
            String[] lines = info.split("\n");
            for (String line : lines) {
                if (line.startsWith("redis_version:")) {
                    version = line.split(":")[1].trim();
                } else if (line.startsWith("used_memory_human:")) {
                    usedMemory = line.split(":")[1].trim();
                } else if (line.startsWith("connected_clients:")) {
                    connectedClients = Integer.parseInt(line.split(":")[1].trim());
                } else if (line.startsWith("uptime_in_seconds:")) {
                    uptimeInSeconds = Long.parseLong(line.split(":")[1].trim());
                }
            }
        }
        
        // Getters and Setters
        public String getStatus() { return status; }
        public void setStatus(String status) { this.status = status; }
        
        public long getResponseTime() { return responseTime; }
        public void setResponseTime(long responseTime) { this.responseTime = responseTime; }
        
        public String getVersion() { return version; }
        public String getUsedMemory() { return usedMemory; }
        public int getConnectedClients() { return connectedClients; }
        public long getUptimeInSeconds() { return uptimeInSeconds; }
    }
}